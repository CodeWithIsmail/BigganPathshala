import { useState , useEffect } from "react";
import { colors } from "./styles";
import NavBar from "./NavBar";
import React from "react";
import { getDocs , collection } from "firebase/firestore";
import { db } from "../firebase/config";
const Feed = () => {
  // Placeholder feed posts
  const predefinedPosts = [
    {
      id: 1,
      user: "рж░рж╛ржХрж┐ржм ржЖрж╣ржорзЗржж",
      avatar: "ЁЯзСЁЯП╜тАНЁЯФм",
      tag: "ржнрзМрждржмрж┐ржЬрзНржЮрж╛ржи",
      tagColor: colors.primary,
      content:
        "ржЖржЬржХрзЗ ржЖржорж┐ ржирж┐ржЙржЯржирзЗрж░ ржкрзНрж░ржержо рж╕рзВрждрзНрж░ рж╢рж┐ржЦрзЗржЫрж┐! ржХрзЛржирзЛ ржмрж╕рзНрждрзБ ржЧрждрж┐рж░ ржЕржмрж╕рзНржерж╛рж░ ржкрж░рж┐ржмрж░рзНрждржи рж╣ржмрзЗ ржирж╛ ржпржжрж┐ рждрж╛рж░ ржЙржкрж░ ржХрзЛржирзЛ ржмрж╛рж╣рзНржпрж┐ржХ ржмрж▓ ржкрзНрж░ржпрж╝рзЛржЧ ржирж╛ ржХрж░рж╛ рж╣ржпрж╝ред",
      image:
        "https://images.unsplash.com/photo-1635070041078-e363dbe005cb?auto=format&fit=crop&w=500&q=80",
      factChecked: true,
      credibility: 5,
      likes: 12,
      dislikes: 1,
      comments: 3,
      time: "10 ржорж┐ржирж┐ржЯ ржЖржЧрзЗ",
      tags: ["ржирж┐ржЙржЯржи", "ржмрж▓", "ржорзЗржХрж╛ржирж┐ржХрзНрж╕"],
      language: "bn",
      featured: true,
    },
    {
      id: 2,
      user: "рж╕рж╛ржмрж┐ржирж╛ ржЦрж╛рждрзБржи",
      avatar: "ЁЯСйЁЯП╜тАНЁЯОУ",
      tag: "ржЬрзАржмржмрж┐ржЬрзНржЮрж╛ржи",
      tagColor: colors.accent1,
      content:
        "ржХрзЛрж╖ ржмрж┐ржнрж╛ржЬржи ржХрж┐ржнрж╛ржмрзЗ рж╣ржпрж╝, рж╕рзЗржЯрж╛ ржХрзЗржЙ рж╕рж╣ржЬржнрж╛ржмрзЗ ржмрзБржЭрж┐ржпрж╝рзЗ ржжрж┐ржмрзЗ? ржЖржорж┐ ржорж╛ржЗржЯрзЛрж╕рж┐рж╕ ржЖрж░ ржорж┐ржпрж╝рзЛрж╕рж┐рж╕ ржоржзрзНржпрзЗ ржкрж╛рж░рзНржержХрзНржп ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛ред",
      image:
        "https://images.unsplash.com/photo-1614935151651-0bea6508db6b?auto=format&fit=crop&w=500&q=80",
      factChecked: false,
      credibility: 2,
      likes: 5,
      dislikes: 0,
      comments: 8,
      time: "рзи ржШржгрзНржЯрж╛ ржЖржЧрзЗ",
      tags: ["ржХрзЛрж╖", "ржорж╛ржЗржЯрзЛрж╕рж┐рж╕", "ржорж┐ржпрж╝рзЛрж╕рж┐рж╕"],
      language: "bn",
      featured: false,
    },
    {
      id: 3,
      user: "рждрж╛рж░рзЗржХ рж╣рзЛрж╕рзЗржи",
      avatar: "ЁЯзСЁЯП╜тАНЁЯПл",
      tag: "ржкрж░рж┐ржмрзЗрж╢ ржмрж┐ржЬрзНржЮрж╛ржи",
      tagColor: colors.accent2,
      content:
        "ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗ ржмржирж╛ржпрж╝ржирзЗрж░ ржЧрзБрж░рзБрждрзНржм ржЕржкрж░рж┐рж╕рзАржоред ржкрзНрж░рждрж┐ ржмржЫрж░ ржЖржорж╛ржжрзЗрж░ ржпржжрж┐ рззрзж% ржмрзЗрж╢рж┐ ржЧрж╛ржЫ рж▓рж╛ржЧрж╛ржЗ, рждржмрзЗ рзи ржмржЫрж░рзЗ ржЖржорж╛ржжрзЗрж░ ржкрж░рж┐ржмрзЗрж╢рзЗрж░ ржЙржирзНржирждрж┐ рж╣ржмрзЗред",
      image:
        "https://images.unsplash.com/photo-1513836279014-a89f7a76ae86?auto=format&fit=crop&w=500&q=80",
      factChecked: true,
      credibility: 4,
      likes: 24,
      dislikes: 2,
      comments: 5,
      time: "рзз ржжрж┐ржи ржЖржЧрзЗ",
      tags: ["ржмржирж╛ржпрж╝ржи", "ржкрж░рж┐ржмрзЗрж╢"],
      language: "bn",
      featured: true,
    },
  ];
  const [posts,setPosts] = useState(predefinedPosts);

  useEffect(() => {
    const fetchBlogs = async () => {
      try {
        const querySnapshot = await getDocs(collection(db, "blog"));
        const firebasePosts = querySnapshot.docs.map((doc) => {
          const data = doc.data();
  
          return {
            id: doc.id,
            user: data.user || "ржЕржЬрзНржЮрж╛ржд ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА",
            avatar: data.avatar || "ЁЯСд",
            tag: data.tag || "рж╕рж╛ржзрж╛рж░ржг",
            tagColor: data.tagColor || colors.primary,
            content: data.content || "",
            image: data.image || "",
            factChecked: data.factChecked ?? false,
            credibility: data.credibility ?? 0,
            likes: data.likes ?? 0,
            dislikes: data.dislikes ?? 0,
            comments: data.comments ?? 0,
            time: data.time || "ржПржЗржорж╛рждрзНрж░",
            tags: data.tags || [],
            featured: data.featured ?? false,
          };
        });
  
        // Merge with predefinedPosts, avoid duplicate IDs
        setPosts((prev) => {
          const allPosts = [...firebasePosts, ...prev];
          const uniquePostsMap = new Map();
  
          allPosts.forEach((post) => {
            uniquePostsMap.set(post.id, post);
          });
  
          return Array.from(uniquePostsMap.values());
        });
      } catch (err) {
        console.error("Error fetching blogs:", err);
      }
    };
  
    fetchBlogs();
  }, []);
  
  

  return (
    <section className="max-w-4xl mx-auto p-4">
      {/* Feed header with filters */}
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-800">ржмрж┐ржЬрзНржЮрж╛ржи ржлрж┐ржб</h2>
        <div className="space-x-2">
          <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">рж╕ржХрж▓</button>
          <button className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">ржЬржиржкрзНрж░рж┐ржпрж╝</button>
          <button className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">ржирждрзБржи</button>
        </div>
      </div>
  
      {posts.map((post) => (
        <article
          key={post.id}
          className={`bg-white rounded-2xl shadow-md p-6 mb-6 border ${
            post.featured ? "border-yellow-400" : "border-gray-200"
          }`}
        >
          {post.factChecked && (
            <div className="mb-2 text-sm font-semibold text-green-600 flex items-center gap-1">
              <span>тЬУ</span> ржпрж╛ржЪрж╛ржЗржХрзГржд
            </div>
          )}
  
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-4">
              <div className="text-3xl">{post.avatar}</div>
              <div>
                <div className="font-semibold text-gray-800">{post.user}</div>
                <div className="text-sm text-gray-500">{post.time}</div>
              </div>
            </div>
            <span
              className="text-sm font-semibold text-white px-3 py-1 rounded-full"
              style={{ backgroundColor: post.tagColor }}
            >
              {post.tag}
            </span>
          </div>
  
          <div className="text-gray-700 mb-4 whitespace-pre-line">
            {post.content}
          </div>
  
          {post.image && (
            <img
              src={post.image}
              alt="blog visual"
              className="rounded-lg mb-4 w-full h-60 object-cover"
            />
          )}
  
          <div className="flex flex-wrap gap-2 mb-4">
            {post.tags.map((tag) => (
              <span key={tag} className="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm">
                #{tag}
              </span>
            ))}
          </div>
  
          <div className="flex flex-wrap gap-3 border-t pt-4 text-sm text-gray-600">
            <button className="hover:text-blue-600">ЁЯУЭ рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк</button>
            <button className="hover:text-blue-600">ЁЯМР ржЕржирзБржмрж╛ржж</button>
            <button className={`hover:text-green-600 ${post.likes > 0 ? "text-green-600 font-bold" : ""}`}>
              ЁЯСН {post.likes}
            </button>
            <button className="hover:text-red-500">ЁЯСО {post.dislikes}</button>
            <button className="hover:text-yellow-600">ЁЯЪй</button>
            <button className="hover:text-purple-600">ЁЯТм {post.comments}</button>
          </div>
        </article>
      ))}
    </section>
  );
  
};

export default Feed;
