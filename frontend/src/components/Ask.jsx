import { useState } from "react";
import React from "react";
import { ThumbsUp, ThumbsDown, MessageCircle, X } from "lucide-react";

const Ask = () => {
  const [question, setQuestion] = useState("");
  const [category, setCategory] = useState("‡¶≠‡ßå‡¶§‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®");
  const [submitted, setSubmitted] = useState(false);
  const [newComment, setNewComment] = useState("");
  const [selectedTags, setSelectedTags] = useState([]);
  const [selectedFilterTags, setSelectedFilterTags] = useState([]); // State for multiple filter tags

  // List of 20 common tags
  const commonTags = [
    "‡¶Ü‡¶≤‡ßã",
    "‡¶ó‡¶§‡¶ø",
    "‡¶¨‡¶≤",
    "‡¶§‡¶æ‡¶™",
    "‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡ßÅ‡ßé",
    "‡¶ö‡ßÅ‡¶Æ‡ßç‡¶¨‡¶ï‡¶§‡ßç‡¶¨",
    "‡¶Æ‡¶π‡¶æ‡¶ï‡¶∞‡ßç‡¶∑",
    "‡¶™‡¶∞‡¶Æ‡¶æ‡¶£‡ßÅ",
    "‡¶Ö‡¶£‡ßÅ",
    "‡¶∞‡¶æ‡¶∏‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡¶ï ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ",
    "‡¶ï‡ßã‡¶∑",
    "‡¶ú‡¶ø‡¶®",
    "‡¶â‡¶¶‡ßç‡¶≠‡¶ø‡¶¶",
    "‡¶™‡ßç‡¶∞‡¶æ‡¶£‡ßÄ",
    "‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶®‡ßç‡¶§‡ßç‡¶∞",
    "‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§",
    "‡¶ú‡ßç‡¶Ø‡¶æ‡¶Æ‡¶ø‡¶§‡¶ø",
    "‡¶ú‡¶≤‡¶¨‡¶æ‡¶Ø‡¶º‡ßÅ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®",
    "‡¶ú‡ßÄ‡¶¨‡¶¨‡ßà‡¶ö‡¶ø‡¶§‡ßç‡¶∞‡ßç‡¶Ø",
    "‡¶™‡ßÅ‡¶®‡¶∞‡ßç‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞",
  ];

  // Initial questions data with user vote tracking and tags
  const initialQuestions = [
    {
      id: 1,
      user: "‡¶®‡¶æ‡¶ú‡¶Æ‡ßÅ‡¶≤",
      avatar: "üë®üèΩ‚Äçüî¨",
      question: "‡¶ï‡ßá‡¶® ‡¶Ü‡¶ï‡¶æ‡¶∂ ‡¶®‡ßÄ‡¶≤?",
      category: "‡¶≠‡ßå‡¶§‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®",
      tags: ["‡¶Ü‡¶≤‡ßã", "‡¶¨‡¶æ‡¶Ø‡¶º‡ßÅ‡¶Æ‡¶£‡ßç‡¶°‡¶≤"],
      upvotes: 24,
      downvotes: 2,
      time: "2 ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶Ü‡¶ó‡ßá",
      showComments: false,
      userVote: null,
      commentList: [
        {
          id: 101,
          user: "‡¶´‡¶æ‡¶∞‡¶π‡¶æ‡¶®‡¶æ",
          avatar: "üë©üèΩ‚Äçüî¨",
          content: "‡¶è‡¶ü‡¶æ ‡¶∞‡ßá‡¶á‡¶≤‡¶ø ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡¶ø‡¶Ç-‡¶è‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶π‡¶Ø‡¶º‡•§",
          upvotes: 7,
          downvotes: 0,
          time: "1 ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶Ü‡¶ó‡ßá",
          userVote: null,
        },
        {
          id: 102,
          user: "‡¶∞‡¶æ‡¶ï‡¶ø‡¶¨",
          avatar: "üë®üèΩ‚Äçüéì",
          content: "‡¶Ü‡¶ï‡¶æ‡¶∂‡ßá‡¶∞ ‡¶®‡ßÄ‡¶≤ ‡¶∞‡¶ô ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø‡ßá‡¶∞ ‡¶Ü‡¶≤‡ßã‡¶∞ ‡¶õ‡ßã‡¶ü ‡¶§‡¶∞‡¶ô‡ßç‡¶ó‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø ‡¶¨‡¶ø‡¶ï‡ßç‡¶∑‡ßá‡¶™‡¶£‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá‡•§",
          upvotes: 5,
          downvotes: 1,
          time: "45 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ü‡¶ó‡ßá",
          userVote: null,
        },
        {
          id: 103,
          user: "‡¶®‡¶æ‡¶´‡¶ø‡¶∏‡¶æ",
          avatar: "üë©üèΩ‚Äçüè´",
          content: "‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø‡ßá‡¶∞ ‡¶Ü‡¶≤‡ßã ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶∞‡¶ô‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶æ‡¶Ø‡¶º‡ßÅ‡¶Æ‡¶£‡ßç‡¶°‡¶≤ ‡¶®‡ßÄ‡¶≤ ‡¶∞‡¶ô‡ßá‡¶∞ ‡¶Ü‡¶≤‡ßã‡¶ï‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶õ‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡ßá‡¶Ø‡¶º, ‡¶§‡¶æ‡¶á ‡¶Ü‡¶ï‡¶æ‡¶∂ ‡¶®‡ßÄ‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º‡•§",
          upvotes: 12,
          downvotes: 0,
          time: "30 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ü‡¶ó‡ßá",
          userVote: null,
        },
      ],
    },
    {
      id: 2,
      user: "‡¶∞‡¶π‡¶ø‡¶Æ‡¶æ",
      avatar: "üë©üèΩ‚Äçüéì",
      question: "‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ó‡¶æ‡¶õ‡¶™‡¶æ‡¶≤‡¶æ ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá?",
      category: "‡¶ú‡ßÄ‡¶¨‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®",
      tags: ["‡¶â‡¶¶‡ßç‡¶≠‡¶ø‡¶¶", "‡¶ï‡ßã‡¶∑"],
      upvotes: 18,
      downvotes: 1,
      time: "5 ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶Ü‡¶ó‡ßá",
      showComments: false,
      userVote: null,
      commentList: [
        {
          id: 201,
          user: "‡¶Ü‡¶ú‡¶ø‡¶ú",
          avatar: "üë®üèΩ‚Äçüè´",
          content: "‡¶ó‡¶æ‡¶õ‡¶™‡¶æ‡¶≤‡¶æ ‡¶∏‡¶æ‡¶≤‡ßã‡¶ï‡¶∏‡¶Ç‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø‡ßá‡¶∞ ‡¶Ü‡¶≤‡ßã, ‡¶™‡¶æ‡¶®‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶æ‡¶∞‡ßç‡¶¨‡¶® ‡¶°‡¶æ‡¶á ‡¶Ö‡¶ï‡ßç‡¶∏‡¶æ‡¶á‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶ó‡ßç‡¶≤‡ßÅ‡¶ï‡ßã‡¶ú ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§",
          upvotes: 9,
          downvotes: 0,
          time: "3 ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶Ü‡¶ó‡ßá",
          userVote: null,
        },
      ],
    },
  ];

  // State for questions
  const [questions, setQuestions] = useState(initialQuestions);

  // Handle question vote
  const handleQuestionVote = (questionId, voteType) => {
    setQuestions(prevQuestions =>
      prevQuestions.map(q => {
        if (q.id === questionId) {
          if (q.userVote === voteType) {
            return {
              ...q,
              upvotes: voteType === "up" ? q.upvotes - 1 : q.upvotes,
              downvotes: voteType === "down" ? q.downvotes - 1 : q.downvotes,
              userVote: null,
            };
          } else if (q.userVote !== null) {
            return {
              ...q,
              upvotes: voteType === "up" ? q.upvotes + 1 : q.userVote === "up" ? q.upvotes - 1 : q.upvotes,
              downvotes: voteType === "down" ? q.downvotes + 1 : q.userVote === "down" ? q.downvotes - 1 : q.downvotes,
              userVote: voteType,
            };
          } else {
            return {
              ...q,
              upvotes: voteType === "up" ? q.upvotes + 1 : q.upvotes,
              downvotes: voteType === "down" ? q.downvotes + 1 : q.downvotes,
              userVote: voteType,
            };
          }
        }
        return q;
      })
    );
  };

  // Toggle comments visibility
  const toggleComments = (questionId) => {
    setQuestions(prevQuestions =>
      prevQuestions.map(q => {
        if (q.id === questionId) {
          return { ...q, showComments: !q.showComments };
        }
        return q;
      })
    );
  };

  // Handle comment vote
  const handleCommentVote = (questionId, commentId, voteType) => {
    setQuestions(prevQuestions =>
      prevQuestions.map(q => {
        if (q.id === questionId) {
          const updatedComments = q.commentList.map(c => {
            if (c.id === commentId) {
              if (c.userVote === voteType) {
                return {
                  ...c,
                  upvotes: voteType === "up" ? c.upvotes - 1 : c.upvotes,
                  downvotes: voteType === "down" ? c.downvotes - 1 : c.downvotes,
                  userVote: null,
                };
              } else if (c.userVote !== null) {
                return {
                  ...c,
                  upvotes: voteType === "up" ? c.upvotes + 1 : c.userVote === "up" ? c.upvotes - 1 : c.upvotes,
                  downvotes: voteType === "down" ? c.downvotes + 1 : c.userVote === "down" ? c.downvotes - 1 : c.downvotes,
                  userVote: voteType,
                };
              } else {
                return {
                  ...c,
                  upvotes: voteType === "up" ? c.upvotes + 1 : c.upvotes,
                  downvotes: voteType === "down" ? c.downvotes + 1 : c.downvotes,
                  userVote: voteType,
                };
              }
            }
            return c;
          });
          return { ...q, commentList: updatedComments };
        }
        return q;
      })
    );
  };

  // Add new comment
  const addComment = (questionId) => {
    if (!newComment.trim()) return;

    setQuestions(prevQuestions =>
      prevQuestions.map(q => {
        if (q.id === questionId) {
          const newCommentObj = {
            id: Date.now(),
            user: "‡¶ó‡ßá‡¶∏‡ßç‡¶ü",
            avatar: "üë§",
            content: newComment,
            upvotes: 0,
            downvotes: 0,
            time: "‡¶è‡¶á‡¶Æ‡¶æ‡¶§‡ßç‡¶∞",
            userVote: null,
          };
          return {
            ...q,
            commentList: [...q.commentList, newCommentObj],
          };
        }
        return q;
      })
    );

    setNewComment("");
  };

  // Submit new question
  const submitQuestion = () => {
    if (!question.trim()) return;

    const newQuestionObj = {
      id: Date.now(),
      user: "‡¶ó‡ßá‡¶∏‡ßç‡¶ü",
      avatar: "üë§",
      question: question,
      category: category,
      tags: selectedTags,
      upvotes: 0,
      downvotes: 0,
      time: "‡¶è‡¶á‡¶Æ‡¶æ‡¶§‡ßç‡¶∞",
      showComments: false,
      userVote: null,
      commentList: [],
    };

    setQuestions(prevQuestions => [newQuestionObj, ...prevQuestions]);
    setQuestion("");
    setSelectedTags([]);
    setSubmitted(true);
  };

  // Handle tag selection for new questions
  const handleTagSelect = (tag) => {
    if (tag && !selectedTags.includes(tag) && selectedTags.length < 3) {
      setSelectedTags([...selectedTags, tag]);
    }
  };

  // Remove a selected tag for new questions
  const removeTag = (tag) => {
    setSelectedTags(selectedTags.filter(t => t !== tag));
  };

  // Handle filter tag selection
  const handleFilterTagSelect = (tag) => {
    if (tag && !selectedFilterTags.includes(tag) && selectedFilterTags.length < 3) {
      setSelectedFilterTags([...selectedFilterTags, tag]);
    }
  };

  // Remove a selected filter tag
  const removeFilterTag = (tag) => {
    setSelectedFilterTags(selectedFilterTags.filter(t => t !== tag));
  };

  // Update tag input when category changes
  const handleCategoryChange = (newCategory) => {
    setCategory(newCategory);
    setSelectedTags([]);
  };

  // Filter questions based on selected filter tags
  const filteredQuestions = selectedFilterTags.length > 0
    ? questions.filter(q => q.tags.some(tag => selectedFilterTags.includes(tag)))
    : questions;

  return (
    <section className="max-w-5xl mx-auto px-4 sm:px-6 py-8">
      <div className="mb-6 text-center">
        <h2 className="text-3xl font-bold bg-gradient-to-r from-blue-500 to-green-400 bg-clip-text text-transparent">
          ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
        </h2>
        <p className="text-blue-800 mt-2">‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ø‡ßá‡¶ï‡ßã‡¶® ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®</p>
      </div>

      {!submitted ? (
        <div className="bg-white rounded-xl shadow-md p-6 mb-8 border border-blue-100">
          <textarea
            value={question}
            onChange={e => setQuestion(e.target.value)}
            placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."
            className="w-full p-4 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition-all resize-none h-40 focus:outline-none"
            required
          />
          <div className="flex flex-col mt-4 gap-4">
            <div className="w-full">
              <label className="block text-blue-800 font-medium mb-1">‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º</label>
              <select
                value={category}
                onChange={e => handleCategoryChange(e.target.value)}
                className="w-full sm:w-48 bg-white p-2 rounded-md border border-blue-200 focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition-all appearance-none focus:outline-none cursor-pointer"
              >
                <option value="‡¶≠‡ßå‡¶§‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®">‡¶≠‡ßå‡¶§‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®</option>
                <option value="‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®">‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®</option>
                <option value="‡¶ú‡ßÄ‡¶¨‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®">‡¶ú‡ßÄ‡¶¨‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®</option>
                <option value="‡¶ó‡¶£‡¶ø‡¶§">‡¶ó‡¶£‡¶ø‡¶§</option>
                <option value="‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®">‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®</option>
              </select>
            </div>

            {/* Tag selection with dropdown */}
            <div className="w-full">
              <label className="block text-blue-800 font-medium mb-1">
                ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ß©‡¶ü‡¶ø)
              </label>
              <select
                onChange={e => handleTagSelect(e.target.value)}
                value=""
                className="w-full p-2 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition-all focus:outline-none"
              >
                <option value="" disabled>
                  ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
                </option>
                {commonTags
                  .filter(tag => !selectedTags.includes(tag))
                  .map(tag => (
                    <option key={tag} value={tag}>
                      {tag}
                    </option>
                  ))}
              </select>
              <div className="flex flex-wrap gap-2 mt-2">
                {selectedTags.map(tag => (
                  <span
                    key={tag}
                    className="inline-flex items-center gap-1 bg-blue-500 text-white text-xs px-2 py-1 rounded-full"
                  >
                    {tag}
                    <button
                      onClick={() => removeTag(tag)}
                      className="ml-1 focus:outline-none"
                      aria-label={`Remove ${tag}`}
                    >
                      <X size={12} />
                    </button>
                  </span>
                ))}
              </div>
            </div>

            <div className="flex justify-end mt-2">
              <button
                onClick={submitQuestion}
                className="bg-gradient-to-r from-blue-500 to-green-400 hover:from-green-400 hover:to-blue-500 text-white font-bold px-6 py-3 rounded-md shadow transition-all flex items-center justify-center gap-2"
                disabled={!question.trim()}
                type="button"
              >
                <span role="img" aria-label="Submit">
                  üì§
                </span>
                ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®
              </button>
            </div>
          </div>
        </div>
      ) : (
        <div className="bg-white rounded-xl shadow-md p-8 mb-8 border border-blue-100 flex flex-col items-center text-center">
          <div className="text-4xl mb-4">‚úÖ</div>
          <h3 className="text-xl font-bold bg-gradient-to-r from-blue-500 to-green-400 bg-clip-text text-transparent mb-2">
            ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!
          </h3>
          <p className="text-blue-800 mb-6">‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶¨‡ßá‡¶®</p>
          <button
            onClick={() => {
              setQuestion("");
              setSelectedTags([]);
              setSubmitted(false);
            }}
            className="bg-gradient-to-r from-blue-500 to-green-400 hover:from-green-400 hover:to-blue-500 text-white font-bold px-6 py-3 rounded-md shadow transition-all"
            type="button"
          >
            ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
          </button>
        </div>
      )}

      <div className="bg-white rounded-xl shadow-md p-6 border border-blue-100">
        <h3 className="text-xl font-bold bg-gradient-to-r from-blue-500 to-green-400 bg-clip-text text-transparent mb-4">
          ‡¶∏‡¶æ‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶∏‡¶Æ‡ßÇ‡¶π
        </h3>

        {/* Tag filter with dropdown and chips */}
        <div className="mb-4">
          <label className="block text-blue-800 font-medium mb-2">
            ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ß©‡¶ü‡¶ø)
          </label>
          <select
            onChange={e => handleFilterTagSelect(e.target.value)}
            value=""
            className="w-full sm:w-48 bg-white p-2 rounded-md border border-blue-200 focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition-all appearance-none focus:outline-none cursor-pointer"
          >
            <option value="" disabled>
              ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
            </option>
            {commonTags
              .filter(tag => !selectedFilterTags.includes(tag))
              .map(tag => (
                <option key={tag} value={tag}>
                  {tag}
                </option>
              ))}
          </select>
          <div className="flex flex-wrap gap-2 mt-2">
            {selectedFilterTags.map(tag => (
              <span
                key={tag}
                className="inline-flex items-center gap-1 bg-blue-500 text-white text-xs px-2 py-1 rounded-full"
              >
                {tag}
                <button
                  onClick={() => removeFilterTag(tag)}
                  className="ml-1 focus:outline-none"
                  aria-label={`Remove ${tag}`}
                >
                  <X size={12} />
                </button>
              </span>
            ))}
          </div>
        </div>

        <div className="space-y-4">
          {filteredQuestions.length > 0 ? (
            filteredQuestions.map(q => (
              <div
                key={q.id}
                className="border border-blue-100 rounded-lg p-4 hover:shadow-md transition-all"
              >
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <span className="text-xl">{q.avatar}</span>
                    <span className="font-medium text-blue-800">{q.user}</span>
                  </div>
                  <span className="text-sm text-blue-600">{q.time}</span>
                </div>
                <div className="text-lg font-medium text-blue-900 mb-3">{q.question}</div>
                <div className="flex flex-wrap gap-2 mb-3">
                  <span className="inline-block bg-gradient-to-r from-blue-500 to-green-400 text-white text-xs px-2 py-1 rounded-full">
                    {q.category}
                  </span>
                  {q.tags &&
                    q.tags.map(tag => (
                      <span
                        key={tag}
                        className="inline-flex items-center gap-1 bg-blue-100 text-blue-700 text-xs px-2 py-1 rounded-full"
                      >
                        {tag}
                      </span>
                    ))}
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <div className="flex items-center gap-1">
                      <button
                        onClick={() => handleQuestionVote(q.id, "up")}
                        className={`flex items-center justify-center p-1 rounded-full transition-all ${
                          q.userVote === "up"
                            ? "bg-green-100 text-green-700"
                            : "text-gray-500 hover:text-green-600 hover:bg-green-50"
                        }`}
                        aria-label="Upvote"
                        type="button"
                      >
                        <ThumbsUp size={16} className={q.userVote === "up" ? "fill-green-700" : ""} />
                      </button>
                      <span className="text-sm font-medium">{q.upvotes}</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <button
                        onClick={() => handleQuestionVote(q.id, "down")}
                        className={`flex items-center justify-center p-1 rounded-full transition-all ${
                          q.userVote === "down"
                            ? "bg-red-100 text-red-700"
                            : "text-gray-500 hover:text-red-600 hover:bg-red-50"
                        }`}
                        aria-label="Downvote"
                        type="button"
                      >
                        <ThumbsDown size={16} className={q.userVote === "down" ? "fill-red-700" : ""} />
                      </button>
                      <span className="text-sm font-medium">{q.downvotes}</span>
                    </div>
                    <button
                      onClick={() => toggleComments(q.id)}
                      className="flex items-center gap-1 text-blue-700 hover:text-blue-500 p-1 rounded-full hover:bg-blue-50 transition-all"
                      aria-label="Show comments"
                      type="button"
                    >
                      <MessageCircle size={16} className={q.showComments ? "fill-blue-100" : ""} />
                      <span className="text-sm">{q.commentList.length}</span>
                    </button>
                  </div>
                </div>

                {q.showComments && (
                  <div className="mt-4 border-t border-blue-100 pt-3">
                    <div className="mb-3 font-medium text-blue-800">‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶∏‡¶Æ‡ßÇ‡¶π:</div>
                    <div className="mb-4 flex gap-2">
                      <input
                        type="text"
                        value={newComment}
                        onChange={e => setNewComment(e.target.value)}
                        placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."
                        className="flex-1 p-2 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition-all focus:outline-none"
                      />
                      <button
                        onClick={() => addComment(q.id)}
                        disabled={!newComment.trim()}
                        className="bg-gradient-to-r from-blue-500 to-green-400 hover:from-green-400 hover:to-blue-500 text-white font-bold px-4 py-2 rounded-md shadow transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                        type="button"
                      >
                        ‡¶™‡¶æ‡¶†‡¶æ‡¶®
                      </button>
                    </div>

                    {q.commentList.length > 0 ? (
                      <div className="space-y-3 ml-6">
                        {q.commentList.map(comment => (
                          <div key={comment.id} className="bg-blue-50 rounded-lg p-3">
                            <div className="flex items-center justify-between mb-1">
                              <div className="flex items-center gap-2">
                                <span>{comment.avatar}</span>
                                <span className="font-medium">{comment.user}</span>
                              </div>
                              <span className="text-xs text-blue-600">{comment.time}</span>
                            </div>
                            <p className="text-blue-900 mb-2">{comment.content}</p>
                            <div className="flex items-center gap-4">
                              <div className="flex items-center gap-1">
                                <button
                                  onClick={() => handleCommentVote(q.id, comment.id, "up")}
                                  className={`flex items-center justify-center p-1 rounded-full transition-all ${
                                    comment.userVote === "up"
                                      ? "bg-green-100 text-green-700"
                                      : "text-gray-500 hover:text-green-600 hover:bg-green-50"
                                  }`}
                                  aria-label="Upvote comment"
                                  type="button"
                                >
                                  <ThumbsUp
                                    size={14}
                                    className={comment.userVote === "up" ? "fill-green-700" : ""}
                                  />
                                </button>
                                <span className="text-xs font-medium">{comment.upvotes}</span>
                              </div>
                              <div className="flex items-center gap-1">
                                <button
                                  onClick={() => handleCommentVote(q.id, comment.id, "down")}
                                  className={`flex items-center justify-center p-1 rounded-full transition-all ${
                                    comment.userVote === "down"
                                      ? "bg-red-100 text-red-700"
                                      : "text-gray-500 hover:text-red-600 hover:bg-red-50"
                                  }`}
                                  aria-label="Downvote comment"
                                  type="button"
                                >
                                  <ThumbsDown
                                    size={14}
                                    className={comment.userVote === "down" ? "fill-red-700" : ""}
                                  />
                                </button>
                                <span className="text-xs font-medium">{comment.downvotes}</span>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <p className="text-gray-500 text-center py-3">
                        ‡¶ï‡ßã‡¶® ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶®‡ßá‡¶á‡•§ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶ú‡¶® ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®!
                      </p>
                    )}
                  </div>
                )}
              </div>
            ))
          ) : (
            <p className="text-gray-500 text-center py-3">
              ‡¶è‡¶á ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó‡¶ó‡ßÅ‡¶≤‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§
            </p>
          )}
        </div>
      </div>
    </section>
  );
};

export default Ask;